{
  "$schema" : "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "Fortify on Demand",
        "version" : "SCA version unknown; Rulepack version unknown",
        "rules" : [ {
          "id" : "146172283",
          "shortDescription" : {
            "text" : "Cookie Security: CSRF Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program does not explicitly set the CSRF_COOKIE_SECURE property to True or sets it to False in settings.py on line 16. The program does not explicitly set the CSRF_COOKIE_SECURE property to True or set it to False."
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data, session identifiers, or carries a CSRF token.\n\nIn this case, the program fails to set the CSRF_COOKIE_SECURE property to True in settings.py on line 16.\n\n\nExample 1: The following configuration entry does not explicitly set the Secure bit for CSRF cookies.\n\n...\nMIDDLEWARE_CLASSES = (\n'django.middleware.csrf.CsrfViewMiddleware',\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.middleware.common.CommonMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.contrib.messages.middleware.MessageMiddleware',\n'csp.middleware.CSPMiddleware',\n'django.middleware.security.SecurityMiddleware',\n...\n)\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all cookies in order to instruct browsers not to send these cookies over HTTP.\n\nExample 2: The following code corrects the mistake in Example 1 by explicitly setting the CSRF_COOKIE_SECURE property to True.\n\n\n...\nMIDDLEWARE_CLASSES = (\n'django.middleware.csrf.CsrfViewMiddleware',\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.middleware.common.CommonMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.contrib.messages.middleware.MessageMiddleware',\n'csp.middleware.CSPMiddleware',\n'django.middleware.security.SecurityMiddleware',\n...\n)\n...\nCSRF_COOKIE_SECURE = True\n...\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/22f04444-c09c-4cd2-8fc7-80fed9c14cda"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172290",
          "shortDescription" : {
            "text" : "Cookie Security: Session Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program does not explicitly set the SESSION_COOKIE_SECURE property to True or set it to False in settings.py on line 16. The program does not explicitly set the SESSION_COOKIE_SECURE property to True or set it to False."
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data, session identifiers, or carries a CSRF token.\n\nIn this case, the program fails to set the SESSION_COOKIE_SECURE property to True in settings.py on line 16.\n\n\nExample 1: The following configuration entry does not explicitly set the Secure bit for session cookies.\n\n...\nMIDDLEWARE_CLASSES = (\n'django.middleware.csrf.CsrfViewMiddleware',\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.middleware.common.CommonMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.contrib.messages.middleware.MessageMiddleware',\n'csp.middleware.CSPMiddleware',\n'django.middleware.security.SecurityMiddleware',\n...\n)\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all cookies in order to instruct browsers not to send these cookies over HTTPS.\n\nExample 2: The following code corrects the mistake in Example 1 by explicitly setting the SESSION_COOKIE_SECURE property to True.\n\n\n...\nMIDDLEWARE_CLASSES = (\n'django.middleware.csrf.CsrfViewMiddleware',\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.middleware.common.CommonMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.contrib.messages.middleware.MessageMiddleware',\n'csp.middleware.CSPMiddleware',\n'django.middleware.security.SecurityMiddleware',\n...\n)\n...\nSESSION_COOKIE_SECURE = True\n...\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/80eeef6e-5c97-40f6-b632-1708f5f2ab38"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172282",
          "shortDescription" : {
            "text" : "Django Bad Practices: Cookie Stored Sessions"
          },
          "fullDescription" : {
            "text" : "Cookie-based sessions are not invalidated when a user logs out. If an attacker were to find, steal, or intercept a user's cookie they could impersonate the user even if that user had logged out."
          },
          "help" : {
            "text" : "Storing session data in Cookies presents several problems:\n\n1. Cookie-based sessions are not invalidated when a user logs out. If an attacker were to find, steal, or intercept a user's cookie they could impersonate the user even if that user had logged out.\n\n2. Session cookies are signed to avoid tampering and guarantee the authenticity of the data, but it will not prevent replay attacks.\n\n3. The session data will be stored using Django's tools for cryptographic signing and the SECRET_KEY setting. If the SECRET_KEY is leaked, an attacker cannot only falsify session data, but if application uses Pickle to serialize session data into cookies, an attacker will be able to craft malicious pickled data that will execute arbitrary code upon deserialization.\n\n4. The session data is signed but not encrypted. This means that attackers will be able to read the session data but not modify it.\n\n5. The cookie size and serialization process can pose a performace problem depending on site load.\n\nIf possible, do not use cookie-based sessions. Store session data in the server and always invalidate sessions when users log out.\n\nDjango offers the following alternatives:\n1. Database-backed sessions (Default option)\n2. Memcached-based sessions\n3. File-based sessions\n\nFor more information, see https://ams.fortify.com//redirect/Issues/4e2f65e9-cb89-43fc-ba74-ea268c9ea9c1"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172279",
          "shortDescription" : {
            "text" : "Django Bad Practices: Pickle Serialized Sessions"
          },
          "fullDescription" : {
            "text" : "Pickle-serialized sessions can lead to remote code execution if attackers can control session data."
          },
          "help" : {
            "text" : "If cookie-based sessions are used and SECRET_KEY is leaked, an attacker will be able to store arbitrary data in the session cookie which will be deserialized in the server leading to arbitrary code execution.\n\nIf cookie-based sessions are used, take extra care to make sure that the secret key is always kept completely secret, for any system which might be remotely accessible.\n\nExample 1: The following view method allows an attacker to steal the SECRET_KEY if it is hardcoded in settings.py configuration file:\n\n\n...\ndef some_view_method(request):\nurl = request.GET['url']\nif \"http://\" in url:\ncontent = urllib.urlopen(url)\nreturn HttpResponse(content)\n...\n\n\nExample 1 method checks that the url parameter is a valid URL by checking that \"http://\" is present in the URL. A malicious attacker may send the following URL to leak the settings.py configuration file that may contain the SECRET_KEY:\n\n\nfile://proc/self/cwd/app/settings.py#http://\n\n\nNote: \"/proc/self/cwd\" in UNIX systems points to the process working directory. This allow attackers to reference files without knowing the exact location.\n\nUse JSON rather than pickle to serialize session data. Django 1.5.3 introduced a new setting, SESSION_SERIALIZER, to customize the session serialization format. This setting defaults to django.contrib.sessions.serializers.PickleSerializer in Django 1.5.x, but, for security hardening, defaults to django.contrib.sessions.serializers.JSONSerializer since Django 1.6. It is highly recommended to use JSON serialization when using cookie-based sessions, since in case that SECRET_KEY is compromised, JSON deserialization won't lead to a remote code execution.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/2f033aa0-14e5-4470-b9ba-cfae0c4349e3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        } ]
      }
    },
    "results" : [ {
      "ruleId" : "146172283",
      "message" : {
        "text" : "The program does not explicitly set the CSRF_COOKIE_SECURE property to True or sets it to False in settings.py on line 16. The program does not explicitly set the CSRF_COOKIE_SECURE property to True or set it to False."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "AD0618D59C6C7C72456A985EADF9F5C9"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "taskManager/settings.py"
          },
          "region" : {
            "startLine" : 16,
            "endLine" : 16,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "settings.py:16 - Block"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "settings.py:44 - AssignmentStatement"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172290",
      "message" : {
        "text" : "The program does not explicitly set the SESSION_COOKIE_SECURE property to True or set it to False in settings.py on line 16. The program does not explicitly set the SESSION_COOKIE_SECURE property to True or set it to False."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E93BFD5918DA8CBAFF95B9167B1C4C3C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "taskManager/settings.py"
          },
          "region" : {
            "startLine" : 16,
            "endLine" : 16,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "settings.py:16 - Block"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "settings.py:44 - AssignmentStatement"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172282",
      "message" : {
        "text" : "Cookie-based sessions are not invalidated when a user logs out. If an attacker were to find, steal, or intercept a user's cookie they could impersonate the user even if that user had logged out."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "6EC45FEF0E9B4E6BCD8ED2AD2CFCE75F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "taskManager/settings.py"
          },
          "region" : {
            "startLine" : 104,
            "endLine" : 104,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "settings.py:104 - AssignmentStatement"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 104
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "settings.py:104 - VariableAccess: SESSION_ENGINE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 104
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172279",
      "message" : {
        "text" : "Pickle-serialized sessions can lead to remote code execution if attackers can control session data."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "486506D8686D62CB58263F42EF9EA6BD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "taskManager/settings.py"
          },
          "region" : {
            "startLine" : 109,
            "endLine" : 109,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "settings.py:109 - AssignmentStatement"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 109
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "settings.py:109 - VariableAccess: SESSION_SERIALIZER"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 109
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172285",
      "message" : {
        "text" : "The application is not configured to send HTTP redirects over SSL/TLS."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "BF17023672C75DF484A9A56A1549D745"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "taskManager/settings.py"
          },
          "region" : {
            "startLine" : 16,
            "endLine" : 16,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "settings.py:16 - Block"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "settings.py:44 - AssignmentStatement"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "taskManager/settings.py"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          } ]
        } ]
      } ]
    } ]
  } ]
}